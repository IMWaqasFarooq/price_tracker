// Mocks generated by Mockito 5.4.4 from annotations
// in price_tracker/test/use_cases/symbol_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:price_tracker/features/home/data/models/symbol_price_model.dart'
    as _i7;
import 'package:price_tracker/features/home/domain/entity/error_entity.dart'
    as _i5;
import 'package:price_tracker/features/home/domain/entity/symbol_entity.dart'
    as _i6;
import 'package:price_tracker/features/home/domain/repositories/home_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i3.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ErrorEntity, List<_i6.SymbolEntity>>>
      getSymbols() => (super.noSuchMethod(
            Invocation.method(
              #getSymbols,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.ErrorEntity, List<_i6.SymbolEntity>>>.value(
                _FakeEither_0<_i5.ErrorEntity, List<_i6.SymbolEntity>>(
              this,
              Invocation.method(
                #getSymbols,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.ErrorEntity, List<_i6.SymbolEntity>>>);

  @override
  _i4.Future<_i2.Either<_i5.ErrorEntity, String>> connectToWebSocket() =>
      (super.noSuchMethod(
        Invocation.method(
          #connectToWebSocket,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.ErrorEntity, String>>.value(
            _FakeEither_0<_i5.ErrorEntity, String>(
          this,
          Invocation.method(
            #connectToWebSocket,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ErrorEntity, String>>);

  @override
  _i4.Future<_i2.Either<_i5.ErrorEntity, String>> subscribeToSymbol(
          String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToSymbol,
          [symbol],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.ErrorEntity, String>>.value(
            _FakeEither_0<_i5.ErrorEntity, String>(
          this,
          Invocation.method(
            #subscribeToSymbol,
            [symbol],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ErrorEntity, String>>);

  @override
  _i4.Future<_i2.Either<_i5.ErrorEntity, String>> unsubscribeFromSymbol(
          String? symbol) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromSymbol,
          [symbol],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.ErrorEntity, String>>.value(
            _FakeEither_0<_i5.ErrorEntity, String>(
          this,
          Invocation.method(
            #unsubscribeFromSymbol,
            [symbol],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ErrorEntity, String>>);

  @override
  _i4.Future<_i2.Either<_i5.ErrorEntity, String>> closeWebSocket() =>
      (super.noSuchMethod(
        Invocation.method(
          #closeWebSocket,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.ErrorEntity, String>>.value(
            _FakeEither_0<_i5.ErrorEntity, String>(
          this,
          Invocation.method(
            #closeWebSocket,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.ErrorEntity, String>>);

  @override
  _i4.Stream<_i2.Either<_i5.ErrorEntity, List<_i7.SymbolPriceUpdate>>>
      listenToPriceUpdates() => (super.noSuchMethod(
            Invocation.method(
              #listenToPriceUpdates,
              [],
            ),
            returnValue: _i4.Stream<
                _i2
                .Either<_i5.ErrorEntity, List<_i7.SymbolPriceUpdate>>>.empty(),
          ) as _i4.Stream<
              _i2.Either<_i5.ErrorEntity, List<_i7.SymbolPriceUpdate>>>);
}
